# Serverless configuration

service: "${file(../config.json):prefix}-backend"

provider:
  name: aws
  runtime: python3.9
  region: "us-east-2"
  memorySize: 128
  iam:
    role: ${ssm:/${self:custom.prefix}/execrole}
  websocketsApiName: "${self:service}-${sls:stage}"
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    STAGE: "${sls:stage}"
    PREFIX: "${file(../config.json):prefix}"
    SNS_TOPIC: ${ssm:/${self:custom.prefix}/${sls:stage}/sns}
    REGION: ${aws:region}
    TABLE: ${ssm:/${self:custom.prefix}/${sls:stage}/dynamodb_name}
    USERPOOL_ID: ${ssm:/${self:custom.prefix}/cognito_user_pool_id}
    CLIENT_ID: ${ssm:/${self:custom.prefix}/cognito_user_pool_client_id}
plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  prefix: "${file(../config.json):prefix}"
  # schedule_enabled:
  #   dev: true
  #   prod: true
  pythonRequirements:
    dockerizePip: true
    noDeploy: []

functions:
  # dynamoDBStream:
  #   handler: handler.dynstream
  #   timeout: 30
  #   events:
  #     - stream:
  #         type: dynamodb
  #         arn: ${ssm:/${self:custom.prefix}/${sls:stage}/dynamodb_stream_arn}

  connectionManager:
    handler: handler.connect
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  defaultMessage:
    handler: handler.message
    events:
      - websocket:
          route: $default

  # schedule_random:
  #   handler: handler.schedule_random
  #   timeout: 70
  #   events:
  #     - schedule: rate(1 minute)

  sns_router:
    handler: handler.sns
    timeout: 30
    events:
      - sns:
          arn: ${ssm:/${self:custom.prefix}/${sls:stage}/sns}
